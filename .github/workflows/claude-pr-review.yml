name: Claude PR Review and Validation
on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  validate-structure:
    if: |
      !contains(github.event.pull_request.title, '[skip-claude]') &&
      !contains(github.event.pull_request.title, '[no-claude]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Validate Command Files Structure
        run: |
          echo "üîç Validating command file structure..."
          error_count=0
          
          for file in .claude/commands/*.md; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              
              # Check title format
              if ! grep -q "^# " "$file"; then
                echo "‚ùå $file: Missing proper title (should start with '# ')"
                error_count=$((error_count + 1))
              fi
              
              # Check for Instructions section
              if ! grep -q "## Instructions" "$file"; then
                echo "‚ùå $file: Missing '## Instructions' section"
                error_count=$((error_count + 1))
              fi
              
              # Check file is not empty
              if [ ! -s "$file" ]; then
                echo "‚ùå $file: File is empty"
                error_count=$((error_count + 1))
              fi
              
              echo "‚úÖ $file: Structure validated"
            fi
          done
          
          if [ $error_count -gt 0 ]; then
            echo "‚ùå Found $error_count validation errors"
            exit 1
          else
            echo "‚úÖ All command files validated successfully"
          fi
          
      - name: Count Commands
        run: |
          command_count=$(find .claude/commands -name "*.md" | wc -l)
          echo "üìä Found $command_count command files"
          
          # Store count for later validation
          echo "COMMAND_COUNT=$command_count" >> $GITHUB_ENV
          
      - name: Test Installation Script
        run: |
          echo "üß™ Testing installation script..."
          chmod +x install.sh
          
          # Test help functionality (this doesn't require Claude Code)
          echo "Testing --help flag..."
          ./install.sh --help
          
          # Test listing commands in CI environment
          echo "Testing --list flag in CI..."
          export CI_TESTING=true
          ./install.sh --list
          
          # Verify the script can find and process command files
          echo "Verifying script can access command files..."
          if [ -d ".claude/commands" ]; then
            echo "‚úÖ Commands directory exists"
            command_count=$(find .claude/commands -name "*.md" | wc -l)
            echo "‚úÖ Found $command_count command files"
          else
            echo "‚ùå Commands directory not found"
            exit 1
          fi
          
          echo "‚úÖ Installation script validation complete"

  claude-review:
    if: |
      !contains(github.event.pull_request.title, '[skip-claude]') &&
      !contains(github.event.pull_request.title, '[no-claude]') &&
      (
        (github.event_name == 'pull_request') ||
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
      )
    runs-on: ubuntu-latest
    needs: validate-structure
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: |
            ## Claude Code Command Repository Review
            
            Please review this pull request for a Claude Code command repository. Focus on:
            
            ### üîç Command File Analysis
            1. **Structure Consistency**: Verify all `.claude/commands/*.md` files follow proper format:
               - Title with `# Command Name`
               - Brief description
               - `## Instructions` section with detailed steps
            
            2. **Content Quality**: Check that commands provide:
               - Clear, actionable instructions
               - Comprehensive workflows
               - Best practices alignment
               - Cross-language/framework adaptability
            
            3. **Naming Conventions**: Ensure command names are:
               - Descriptive and clear
               - Consistently formatted (kebab-case)
               - Properly categorized
            
            ### üìö Documentation Review
            1. **README.md Accuracy**: Verify that:
               - All new commands are listed with descriptions
               - Categories are properly organized
               - Command count is accurate
               - Usage examples are helpful
            
            ### üõ†Ô∏è Installation & Setup
            1. **install.sh Functionality**: Review script for:
               - Cross-platform compatibility
               - Error handling
               - Clear usage instructions
               - Proper file permissions
            
            ### üéØ Specific Feedback Needed
            - Are there any commands missing from documentation?
            - Do command descriptions accurately reflect their functionality?
            - Are there opportunities to improve command organization?
            - Any security or best practice concerns?
            
            Provide specific, actionable feedback with file references where applicable.
          
          claude_env: |
            NODE_ENV: test
            CI: true
            VALIDATE_COMMANDS: true